; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27034.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	WskDispatch
EXTRN	__imp_KeResetEvent:PROC
EXTRN	__imp_WskDeregister:PROC
EXTRN	__imp_KeWaitForSingleObject:PROC
EXTRN	__imp_KeInitializeEvent:PROC
EXTRN	__imp_WskReleaseProviderNPI:PROC
EXTRN	__imp_WskCaptureProviderNPI:PROC
EXTRN	__imp_IoReuseIrp:PROC
EXTRN	__imp_IoAllocateIrp:PROC
EXTRN	__imp_IoFreeMdl:PROC
EXTRN	__imp_KeSetEvent:PROC
EXTRN	__imp_WskRegister:PROC
EXTRN	__imp_IoAllocateMdl:PROC
EXTRN	__imp_IoFreeIrp:PROC
EXTRN	__imp_MmProbeAndLockPages:PROC
EXTRN	__imp_MmUnlockPages:PROC
EXTRN	__imp___C_specific_handler:PROC
COMM	WskRegistration:BYTE:018H
COMM	WskProvider:BYTE:010H
_DATA	ENDS
WskDispatch DW	0100H
	DW	00H
	ORG $+4
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	KsSendRecv
PUBLIC	KsCreateSocket
PUBLIC	KsDestroy
PUBLIC	KsInitialize
PUBLIC	KspAsyncContextWaitForCompletion
PUBLIC	KspAsyncContextCompletionRoutine
PUBLIC	KspAsyncContextReset
PUBLIC	KspAsyncContextFree
PUBLIC	KspAsyncContextAllocate
PUBLIC	IoSetCompletionRoutine
PUBLIC	IoGetNextIrpStackLocation
PUBLIC	KsCreateListenSocket
PUBLIC	KsSend
PUBLIC	KsBind
PUBLIC	KsCloseSocket
PUBLIC	KsAccept
PUBLIC	KsRecv
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsSendRecv DD imagerel $LN26
	DD	imagerel $LN26+297
	DD	imagerel $unwind$KsSendRecv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsCreateSocket DD imagerel $LN21
	DD	imagerel $LN21+120
	DD	imagerel $unwind$KsCreateSocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$KsCreateSocket DD imagerel $LN21+120
	DD	imagerel $LN21+250
	DD	imagerel $chain$0$KsCreateSocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$KsCreateSocket DD imagerel $LN21+250
	DD	imagerel $LN21+302
	DD	imagerel $chain$1$KsCreateSocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsDestroy DD imagerel $LN4
	DD	imagerel $LN4+35
	DD	imagerel $unwind$KsDestroy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsInitialize DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$KsInitialize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KspAsyncContextWaitForCompletion DD imagerel $LN6
	DD	imagerel $LN6+68
	DD	imagerel $unwind$KspAsyncContextWaitForCompletion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KspAsyncContextCompletionRoutine DD imagerel $LN4
	DD	imagerel $LN4+28
	DD	imagerel $unwind$KspAsyncContextCompletionRoutine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KspAsyncContextReset DD imagerel $LN11
	DD	imagerel $LN11+66
	DD	imagerel $unwind$KspAsyncContextReset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KspAsyncContextAllocate DD imagerel $LN12
	DD	imagerel $LN12+86
	DD	imagerel $unwind$KspAsyncContextAllocate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsCreateListenSocket DD imagerel $LN4
	DD	imagerel $LN4+14
	DD	imagerel $unwind$KsCreateListenSocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsSend DD imagerel $LN4
	DD	imagerel $LN4+19
	DD	imagerel $unwind$KsSend
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsBind DD imagerel $LN17
	DD	imagerel $LN17+156
	DD	imagerel $unwind$KsBind
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsCloseSocket DD imagerel $LN18
	DD	imagerel $LN18+174
	DD	imagerel $unwind$KsCloseSocket
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsAccept DD imagerel $LN28
	DD	imagerel $LN28+315
	DD	imagerel $unwind$KsAccept
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$KsRecv DD imagerel $LN4
	DD	imagerel $LN4+19
	DD	imagerel $unwind$KsRecv
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsRecv DD 030402H
	DD	06001601H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsAccept DD 0c1802H
	DD	06001606H
	DD	0e6418H
	DD	0d5418H
	DD	0c3418H
	DD	0f0147218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsCloseSocket DD 080f02H
	DD	06001602H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsBind DD 080f02H
	DD	06001602H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsSend DD 030402H
	DD	06001601H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsCreateListenSocket DD 030402H
	DD	06001601H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KspAsyncContextAllocate DD 040602H
	DD	06241602H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KspAsyncContextReset DD 040602H
	DD	06001602H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KspAsyncContextCompletionRoutine DD 030402H
	DD	06001601H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KspAsyncContextWaitForCompletion DD 060a02H
	DD	06001602H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsInitialize DD 030402H
	DD	06001601H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsDestroy DD 030402H
	DD	06001607H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$KsCreateSocket DD 020022H
	DD	06001602H
	DD	imagerel $LN21
	DD	imagerel $LN21+120
	DD	imagerel $unwind$KsCreateSocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$KsCreateSocket DD 020522H
	DD	0ee405H
	DD	imagerel $LN21
	DD	imagerel $LN21+120
	DD	imagerel $unwind$KsCreateSocket
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsCreateSocket DD 081402H
	DD	0116414H
	DD	0105414H
	DD	0f3414H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$KsSendRecv DD 0a150aH
	DD	06001603H
	DD	0e7415H
	DD	0d6415H
	DD	0c3415H
	DD	0e0119215H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN26+77
	DD	imagerel $LN26+93
	DD	01H
	DD	imagerel $LN26+257
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsRecv
_TEXT	SEGMENT
Socket$ = 64
Buffer$ = 72
Length$ = 80
Flags$dead$ = 88
KsRecv	PROC						; COMDAT

; 853  : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 854  :   return KsSendRecv(Socket, Buffer, Length, Flags, FALSE);

  00004	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  00009	e8 00 00 00 00	 call	 KsSendRecv

; 855  : }

  0000e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00012	c3		 ret	 0
KsRecv	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsAccept
_TEXT	SEGMENT
Socket$ = 96
NewSocket$ = 104
LocalAddress$dead$ = 112
RemoteAddress$ = 120
KsAccept PROC						; COMDAT

; 533  : {

$LN28:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 56		 push	 r14
  00012	41 57		 push	 r15
  00014	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 534  :   NTSTATUS Status;
; 535  : 
; 536  :   //
; 537  :   // Reset the async context.
; 538  :   //
; 539  : 
; 540  :   KspAsyncContextReset(&Socket->AsyncContext);

  00018	48 8d 71 10	 lea	 rsi, QWORD PTR [rcx+16]
  0001c	4c 8b f1	 mov	 r14, rcx

; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  0001f	48 8b ce	 mov	 rcx, rsi

; 533  : {

  00022	49 8b d9	 mov	 rbx, r9
  00025	4c 8b fa	 mov	 r15, rdx

; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeResetEvent

; 174  : 
; 175  :   //
; 176  :   // Reuse the IRP.
; 177  :   //
; 178  : 
; 179  :   IoReuseIrp(AsyncContext->Irp, STATUS_UNSUCCESSFUL);

  0002e	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00032	ba 01 00 00 c0	 mov	 edx, -1073741823	; ffffffffc0000001H
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoReuseIrp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  0003d	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00041	48 8d 2d 00 00
	00 00		 lea	 rbp, OFFSET FLAT:KspAsyncContextCompletionRoutine
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 546  :   Status = Socket->WskListenDispatch->WskAccept(

  00048	45 33 c9	 xor	 r9d, r9d
  0004b	33 d2		 xor	 edx, edx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  0004d	4c 8b 80 b8 00
	00 00		 mov	 r8, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00054	49 89 68 f0	 mov	 QWORD PTR [r8-16], rbp

; 31852:     irpSp->Context = Context;

  00058	49 89 70 f8	 mov	 QWORD PTR [r8-8], rsi

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  0005c	41 c6 40 bb e0	 mov	 BYTE PTR [r8-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 546  :   Status = Socket->WskListenDispatch->WskAccept(

  00061	45 33 c0	 xor	 r8d, r8d
  00064	49 8b 46 28	 mov	 rax, QWORD PTR [r14+40]
  00068	4d 8b 56 08	 mov	 r10, QWORD PTR [r14+8]
  0006c	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  0006f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00074	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00079	33 db		 xor	 ebx, ebx
  0007b	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00080	41 ff 52 18	 call	 QWORD PTR [r10+24]
  00084	8b f8		 mov	 edi, eax

; 213  :   if (*Status == STATUS_PENDING)

  00086	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  0008b	75 1d		 jne	 SHORT $LN15@KsAccept

; 214  :   {
; 215  :     KeWaitForSingleObject(

  0008d	45 33 c9	 xor	 r9d, r9d
  00090	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00095	45 33 c0	 xor	 r8d, r8d
  00098	33 d2		 xor	 edx, edx
  0009a	48 8b ce	 mov	 rcx, rsi
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeWaitForSingleObject

; 216  :       &AsyncContext->CompletionEvent,
; 217  :       Executive,
; 218  :       KernelMode,
; 219  :       FALSE,
; 220  :       NULL
; 221  :       );
; 222  : 
; 223  :     *Status = AsyncContext->Irp->IoStatus.Status;

  000a3	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  000a7	8b 78 30	 mov	 edi, DWORD PTR [rax+48]
$LN15@KsAccept:

; 547  :     Socket->WskSocket,          // ListenSocket
; 548  :     0,                          // Flags
; 549  :     NULL,                       // AcceptSocketContext
; 550  :     NULL,                       // AcceptSocketDispatch
; 551  :     LocalAddress,               // LocalAddress
; 552  :     RemoteAddress,              // RemoteAddress
; 553  :     Socket->AsyncContext.Irp    // Irp
; 554  :     );
; 555  : 
; 556  :   KspAsyncContextWaitForCompletion(&Socket->AsyncContext, &Status);
; 557  : 
; 558  :   //
; 559  :   // Save the socket instance and the socket dispatch table.
; 560  :   //
; 561  : 
; 562  :   if (NT_SUCCESS(Status))

  000aa	85 ff		 test	 edi, edi
  000ac	78 72		 js	 SHORT $LN2@KsAccept

; 563  :   {
; 564  :     PKSOCKET KNewSocket = ExAllocatePoolWithTag(PagedPool, sizeof(KSOCKET), MEMORY_TAG);

  000ae	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  000b3	41 b8 61 34 66
	64		 mov	 r8d, 1684419681		; 64663461H
  000b9	8d 4a d1	 lea	 ecx, QWORD PTR [rdx-47]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  000c2	48 8b d8	 mov	 rbx, rax

; 565  : 
; 566  :     if (!KNewSocket)

  000c5	48 85 c0	 test	 rax, rax
  000c8	75 07		 jne	 SHORT $LN3@KsAccept

; 567  :     {
; 568  :       return STATUS_INSUFFICIENT_RESOURCES;

  000ca	b8 9a 00 00 c0	 mov	 eax, -1073741670	; ffffffffc000009aH
  000cf	eb 51		 jmp	 SHORT $LN1@KsAccept
$LN3@KsAccept:

; 569  :     }
; 570  : 
; 571  :     KNewSocket->WskSocket = (PWSK_SOCKET)Socket->AsyncContext.Irp->IoStatus.Information;

  000d1	49 8b 46 28	 mov	 rax, QWORD PTR [r14+40]

; 573  :     KspAsyncContextAllocate(&KNewSocket->AsyncContext);

  000d5	48 8d 73 10	 lea	 rsi, QWORD PTR [rbx+16]

; 97   :   KeInitializeEvent(

  000d9	45 33 c0	 xor	 r8d, r8d
  000dc	48 8b ce	 mov	 rcx, rsi

; 569  :     }
; 570  : 
; 571  :     KNewSocket->WskSocket = (PWSK_SOCKET)Socket->AsyncContext.Irp->IoStatus.Information;

  000df	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000e3	48 89 03	 mov	 QWORD PTR [rbx], rax

; 97   :   KeInitializeEvent(

  000e6	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]

; 572  :     KNewSocket->WskDispatch = (PVOID)KNewSocket->WskSocket->Dispatch;

  000ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ed	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 97   :   KeInitializeEvent(

  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeInitializeEvent

; 98   :     &AsyncContext->CompletionEvent,
; 99   :     SynchronizationEvent,
; 100  :     FALSE
; 101  :     );
; 102  : 
; 103  :   //
; 104  :   // Initialize the IRP.
; 105  :   //
; 106  : 
; 107  :   AsyncContext->Irp = IoAllocateIrp(1, FALSE);

  000f7	33 d2		 xor	 edx, edx
  000f9	b1 01		 mov	 cl, 1
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoAllocateIrp
  00101	48 89 46 18	 mov	 QWORD PTR [rsi+24], rax

; 108  : 
; 109  :   if (AsyncContext->Irp == NULL)

  00105	48 85 c0	 test	 rax, rax
  00108	74 13		 je	 SHORT $LN23@KsAccept
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  0010a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00111	48 89 68 f0	 mov	 QWORD PTR [rax-16], rbp

; 31852:     irpSp->Context = Context;

  00115	48 89 70 f8	 mov	 QWORD PTR [rax-8], rsi

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  00119	c6 40 bb e0	 mov	 BYTE PTR [rax-69], 224	; 000000e0H
$LN23@KsAccept:
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 575  :     *NewSocket = KNewSocket;

  0011d	49 89 1f	 mov	 QWORD PTR [r15], rbx
$LN2@KsAccept:

; 576  :   }
; 577  : 
; 578  :   return Status;

  00120	8b c7		 mov	 eax, edi
$LN1@KsAccept:

; 579  : }

  00122	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00127	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0012c	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00131	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00135	41 5f		 pop	 r15
  00137	41 5e		 pop	 r14
  00139	5f		 pop	 rdi
  0013a	c3		 ret	 0
KsAccept ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsCloseSocket
_TEXT	SEGMENT
Socket$ = 64
KsCloseSocket PROC					; COMDAT

; 459  : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 460  :   NTSTATUS Status;
; 461  : 
; 462  :   //
; 463  :   // Reset the async context.
; 464  :   //
; 465  : 
; 466  :   KspAsyncContextReset(&Socket->AsyncContext);

  0000f	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  00013	48 8b d9	 mov	 rbx, rcx

; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  00016	48 8b cf	 mov	 rcx, rdi
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeResetEvent

; 174  : 
; 175  :   //
; 176  :   // Reuse the IRP.
; 177  :   //
; 178  : 
; 179  :   IoReuseIrp(AsyncContext->Irp, STATUS_UNSUCCESSFUL);

  0001f	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00023	ba 01 00 00 c0	 mov	 edx, -1073741823	; ffffffffc0000001H
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoReuseIrp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  0002e	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  00032	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:KspAsyncContextCompletionRoutine
  00040	48 89 42 f0	 mov	 QWORD PTR [rdx-16], rax

; 31852:     irpSp->Context = Context;

  00044	48 89 7a f8	 mov	 QWORD PTR [rdx-8], rdi

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  00048	c6 42 bb e0	 mov	 BYTE PTR [rdx-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 472  :   Status = Socket->WskConnectionDispatch->WskCloseSocket(

  0004c	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00050	48 8b 53 28	 mov	 rdx, QWORD PTR [rbx+40]
  00054	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00057	ff 50 08	 call	 QWORD PTR [rax+8]
  0005a	8b f0		 mov	 esi, eax

; 213  :   if (*Status == STATUS_PENDING)

  0005c	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  00061	75 21		 jne	 SHORT $LN13@KsCloseSoc

; 214  :   {
; 215  :     KeWaitForSingleObject(

  00063	45 33 c9	 xor	 r9d, r9d
  00066	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0006f	45 33 c0	 xor	 r8d, r8d
  00072	33 d2		 xor	 edx, edx
  00074	48 8b cf	 mov	 rcx, rdi
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeWaitForSingleObject

; 216  :       &AsyncContext->CompletionEvent,
; 217  :       Executive,
; 218  :       KernelMode,
; 219  :       FALSE,
; 220  :       NULL
; 221  :       );
; 222  : 
; 223  :     *Status = AsyncContext->Irp->IoStatus.Status;

  0007d	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  00081	8b 70 30	 mov	 esi, DWORD PTR [rax+48]
$LN13@KsCloseSoc:

; 141  :   IoFreeIrp(AsyncContext->Irp);

  00084	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoFreeIrp

; 473  :     Socket->WskSocket,
; 474  :     Socket->AsyncContext.Irp
; 475  :     );
; 476  : 
; 477  :   KspAsyncContextWaitForCompletion(&Socket->AsyncContext, &Status);
; 478  : 
; 479  :   //
; 480  :   // Free the async context.
; 481  :   //
; 482  : 
; 483  :   KspAsyncContextFree(&Socket->AsyncContext);
; 484  : 
; 485  :   //
; 486  :   // Free memory for the socket structure.
; 487  :   //
; 488  : 
; 489  :   ExFreePoolWithTag(Socket, MEMORY_TAG);

  0008e	ba 61 34 66 64	 mov	 edx, 1684419681		; 64663461H
  00093	48 8b cb	 mov	 rcx, rbx
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExFreePoolWithTag

; 490  : 
; 491  :   return Status;
; 492  : }

  0009c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  000a1	8b c6		 mov	 eax, esi
  000a3	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  000a8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
KsCloseSocket ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsBind
_TEXT	SEGMENT
Socket$ = 64
LocalAddress$ = 72
KsBind	PROC						; COMDAT

; 500  : {

$LN17:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 501  :   NTSTATUS Status;
; 502  : 
; 503  :   //
; 504  :   // Reset the async context.
; 505  :   //
; 506  : 
; 507  :   KspAsyncContextReset(&Socket->AsyncContext);

  0000f	48 8d 71 10	 lea	 rsi, QWORD PTR [rcx+16]
  00013	48 8b f9	 mov	 rdi, rcx

; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  00016	48 8b ce	 mov	 rcx, rsi

; 500  : {

  00019	48 8b da	 mov	 rbx, rdx

; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeResetEvent

; 174  : 
; 175  :   //
; 176  :   // Reuse the IRP.
; 177  :   //
; 178  : 
; 179  :   IoReuseIrp(AsyncContext->Irp, STATUS_UNSUCCESSFUL);

  00022	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00026	ba 01 00 00 c0	 mov	 edx, -1073741823	; ffffffffc0000001H
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoReuseIrp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00031	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 513  :   Status = Socket->WskListenDispatch->WskBind(

  00035	48 8b d3	 mov	 rdx, rbx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00038	4c 8b 80 b8 00
	00 00		 mov	 r8, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:KspAsyncContextCompletionRoutine
  00046	49 89 40 f0	 mov	 QWORD PTR [r8-16], rax

; 31852:     irpSp->Context = Context;

  0004a	49 89 70 f8	 mov	 QWORD PTR [r8-8], rsi

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  0004e	41 c6 40 bb e0	 mov	 BYTE PTR [r8-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 513  :   Status = Socket->WskListenDispatch->WskBind(

  00053	45 33 c0	 xor	 r8d, r8d
  00056	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0005a	4c 8b 4f 28	 mov	 r9, QWORD PTR [rdi+40]
  0005e	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00061	ff 50 10	 call	 QWORD PTR [rax+16]

; 213  :   if (*Status == STATUS_PENDING)

  00064	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  00069	75 21		 jne	 SHORT $LN15@KsBind

; 214  :   {
; 215  :     KeWaitForSingleObject(

  0006b	45 33 c9	 xor	 r9d, r9d
  0006e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00077	45 33 c0	 xor	 r8d, r8d
  0007a	33 d2		 xor	 edx, edx
  0007c	48 8b ce	 mov	 rcx, rsi
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeWaitForSingleObject

; 216  :       &AsyncContext->CompletionEvent,
; 217  :       Executive,
; 218  :       KernelMode,
; 219  :       FALSE,
; 220  :       NULL
; 221  :       );
; 222  : 
; 223  :     *Status = AsyncContext->Irp->IoStatus.Status;

  00085	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  00089	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
$LN15@KsBind:

; 514  :     Socket->WskSocket,          // Socket
; 515  :     LocalAddress,               // LocalAddress
; 516  :     0,                          // Flags (reserved)
; 517  :     Socket->AsyncContext.Irp    // Irp
; 518  :     );
; 519  : 
; 520  :   KspAsyncContextWaitForCompletion(&Socket->AsyncContext, &Status);
; 521  : 
; 522  :   return Status;
; 523  : }

  0008c	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00091	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
  00096	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
KsBind	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsSend
_TEXT	SEGMENT
Socket$ = 64
Buffer$ = 72
Length$ = 80
Flags$dead$ = 88
KsSend	PROC						; COMDAT

; 841  : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 842  :   return KsSendRecv(Socket, Buffer, Length, Flags, TRUE);

  00004	c6 44 24 20 01	 mov	 BYTE PTR [rsp+32], 1
  00009	e8 00 00 00 00	 call	 KsSendRecv

; 843  : }

  0000e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00012	c3		 ret	 0
KsSend	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsCreateListenSocket
_TEXT	SEGMENT
Socket$ = 64
AddressFamily$dead$ = 72
SocketType$dead$ = 80
Protocol$ = 88
KsCreateListenSocket PROC				; COMDAT

; 438  : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 439  :   return KsCreateSocket(Socket, AddressFamily, SocketType, Protocol, WSK_FLAG_LISTEN_SOCKET);

  00004	e8 00 00 00 00	 call	 KsCreateSocket

; 440  : }

  00009	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0000d	c3		 ret	 0
KsCreateListenSocket ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
;	COMDAT IoGetNextIrpStackLocation
_TEXT	SEGMENT
Irp$ = 8
IoGetNextIrpStackLocation PROC				; COMDAT

; 31466:     NT_ASSERT(Irp->CurrentLocation > 0);
; 31467: 
; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00000	48 8b 81 b8 00
	00 00		 mov	 rax, QWORD PTR [rcx+184]
  00007	48 83 e8 48	 sub	 rax, 72			; 00000048H

; 31469: }

  0000b	c3		 ret	 0
IoGetNextIrpStackLocation ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
;	COMDAT IoSetCompletionRoutine
_TEXT	SEGMENT
Irp$ = 8
CompletionRoutine$dead$ = 16
Context$ = 24
InvokeOnSuccess$dead$ = 32
InvokeOnError$dead$ = 40
InvokeOnCancel$dead$ = 48
IoSetCompletionRoutine PROC				; COMDAT

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00000	48 8b 81 b8 00
	00 00		 mov	 rax, QWORD PTR [rcx+184]

; 31848:     PIO_STACK_LOCATION irpSp;
; 31849:     NT_ASSERT( (InvokeOnSuccess || InvokeOnError || InvokeOnCancel) ? (CompletionRoutine != NULL) : TRUE );
; 31850:     irpSp = IoGetNextIrpStackLocation(Irp);
; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:KspAsyncContextCompletionRoutine
  0000e	48 89 48 f0	 mov	 QWORD PTR [rax-16], rcx

; 31852:     irpSp->Context = Context;

  00012	4c 89 40 f8	 mov	 QWORD PTR [rax-8], r8

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  00016	c6 40 bb e0	 mov	 BYTE PTR [rax-69], 224	; 000000e0H

; 31865:     }
; 31866: }

  0001a	c3		 ret	 0
IoSetCompletionRoutine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KspAsyncContextAllocate
_TEXT	SEGMENT
AsyncContext$ = 48
KspAsyncContextAllocate PROC				; COMDAT

; 92   : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 93   :   //
; 94   :   // Initialize the completion event.
; 95   :   //
; 96   : 
; 97   :   KeInitializeEvent(

  00006	45 33 c0	 xor	 r8d, r8d
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeInitializeEvent

; 98   :     &AsyncContext->CompletionEvent,
; 99   :     SynchronizationEvent,
; 100  :     FALSE
; 101  :     );
; 102  : 
; 103  :   //
; 104  :   // Initialize the IRP.
; 105  :   //
; 106  : 
; 107  :   AsyncContext->Irp = IoAllocateIrp(1, FALSE);

  00016	33 d2		 xor	 edx, edx
  00018	b1 01		 mov	 cl, 1
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoAllocateIrp
  00020	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 108  : 
; 109  :   if (AsyncContext->Irp == NULL)

  00024	48 85 c0	 test	 rax, rax
  00027	75 0b		 jne	 SHORT $LN2@KspAsyncCo

; 110  :   {
; 111  :     return STATUS_INSUFFICIENT_RESOURCES;

  00029	b8 9a 00 00 c0	 mov	 eax, -1073741670	; ffffffffc000009aH

; 129  : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5b		 pop	 rbx
  00033	c3		 ret	 0
$LN2@KspAsyncCo:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00034	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:KspAsyncContextCompletionRoutine
  00042	48 89 48 f0	 mov	 QWORD PTR [rax-16], rcx

; 31852:     irpSp->Context = Context;

  00046	48 89 58 f8	 mov	 QWORD PTR [rax-8], rbx

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  0004a	c6 40 bb e0	 mov	 BYTE PTR [rax-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 128  :   return STATUS_SUCCESS;

  0004e	33 c0		 xor	 eax, eax

; 129  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5b		 pop	 rbx
  00055	c3		 ret	 0
KspAsyncContextAllocate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KspAsyncContextFree
_TEXT	SEGMENT
AsyncContext$ = 8
KspAsyncContextFree PROC				; COMDAT

; 137  :   //
; 138  :   // Free the IRP.
; 139  :   //
; 140  : 
; 141  :   IoFreeIrp(AsyncContext->Irp);

  00000	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00004	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_IoFreeIrp
KspAsyncContextFree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KspAsyncContextReset
_TEXT	SEGMENT
AsyncContext$ = 48
KspAsyncContextReset PROC				; COMDAT

; 149  : {

$LN11:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 150  :   //
; 151  :   // If the WSK application allocated the IRP, or is reusing an IRP
; 152  :   // that it previously allocated, then it must set an IoCompletion
; 153  :   // routine for the IRP before calling a WSK function.  In this
; 154  :   // situation, the WSK application must specify TRUE for the
; 155  :   // InvokeOnSuccess, InvokeOnError, and InvokeOnCancel parameters that
; 156  :   // are passed to the IoSetCompletionRoutine function to ensure that
; 157  :   // the IoCompletion routine is always called. Furthermore, the IoCompletion
; 158  :   // routine that is set for the IRP must always return
; 159  :   // STATUS_MORE_PROCESSING_REQUIRED to terminate the completion processing
; 160  :   // of the IRP.  If the WSK application is done using the IRP after the
; 161  :   // IoCompletion routine has been called, then it should call the IoFreeIrp
; 162  :   // function to free the IRP before returning from the IoCompletion routine.
; 163  :   // If the WSK application does not free the IRP then it can reuse the IRP
; 164  :   // for a call to another WSK function.
; 165  :   //
; 166  :   // (ref: https://docs.microsoft.com/en-us/windows-hardware/drivers/network/using-irps-with-winsock-kernel-functions)
; 167  :   //
; 168  : 
; 169  :   //
; 170  :   // Reset the completion event.
; 171  :   //
; 172  : 
; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeResetEvent

; 174  : 
; 175  :   //
; 176  :   // Reuse the IRP.
; 177  :   //
; 178  : 
; 179  :   IoReuseIrp(AsyncContext->Irp, STATUS_UNSUCCESSFUL);

  0000f	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00013	ba 01 00 00 c0	 mov	 edx, -1073741823	; ffffffffc0000001H
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoReuseIrp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  0001e	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00022	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:KspAsyncContextCompletionRoutine
  00030	48 89 42 f0	 mov	 QWORD PTR [rdx-16], rax

; 31852:     irpSp->Context = Context;

  00034	48 89 5a f8	 mov	 QWORD PTR [rdx-8], rbx

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  00038	c6 42 bb e0	 mov	 BYTE PTR [rdx-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 189  : }

  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
KspAsyncContextReset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KspAsyncContextCompletionRoutine
_TEXT	SEGMENT
DeviceObject$ = 48
Irp$ = 56
CompletionEvent$ = 64
KspAsyncContextCompletionRoutine PROC			; COMDAT

; 198  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	49 8b c8	 mov	 rcx, r8

; 199  :   UNREFERENCED_PARAMETER(DeviceObject);
; 200  :   UNREFERENCED_PARAMETER(Irp);
; 201  : 
; 202  :   KeSetEvent(CompletionEvent, IO_NO_INCREMENT, FALSE);

  00007	33 d2		 xor	 edx, edx
  00009	45 33 c0	 xor	 r8d, r8d
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeSetEvent

; 203  :   return STATUS_MORE_PROCESSING_REQUIRED;

  00012	b8 16 00 00 c0	 mov	 eax, -1073741802	; ffffffffc0000016H

; 204  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
KspAsyncContextCompletionRoutine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KspAsyncContextWaitForCompletion
_TEXT	SEGMENT
AsyncContext$ = 64
Status$ = 72
KspAsyncContextWaitForCompletion PROC			; COMDAT

; 212  : {

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 213  :   if (*Status == STATUS_PENDING)

  0000a	8b 02		 mov	 eax, DWORD PTR [rdx]
  0000c	48 8b da	 mov	 rbx, rdx
  0000f	48 8b f9	 mov	 rdi, rcx
  00012	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  00017	75 20		 jne	 SHORT $LN4@KspAsyncCo

; 214  :   {
; 215  :     KeWaitForSingleObject(

  00019	45 33 c9	 xor	 r9d, r9d
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00025	45 33 c0	 xor	 r8d, r8d
  00028	33 d2		 xor	 edx, edx
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeWaitForSingleObject

; 216  :       &AsyncContext->CompletionEvent,
; 217  :       Executive,
; 218  :       KernelMode,
; 219  :       FALSE,
; 220  :       NULL
; 221  :       );
; 222  : 
; 223  :     *Status = AsyncContext->Irp->IoStatus.Status;

  00030	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  00034	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00037	89 03		 mov	 DWORD PTR [rbx], eax
$LN4@KspAsyncCo:

; 224  :   }
; 225  : 
; 226  :   return *Status;
; 227  : }

  00039	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  0003e	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00042	5f		 pop	 rdi
  00043	c3		 ret	 0
KspAsyncContextWaitForCompletion ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsInitialize
_TEXT	SEGMENT
WskClient$ = 32
KsInitialize PROC					; COMDAT

; 238  : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 239  :   NTSTATUS Status;
; 240  : 
; 241  :   //
; 242  :   // Register as a WSK client.
; 243  :   //
; 244  : 
; 245  :   WSK_CLIENT_NPI WskClient;
; 246  :   WskClient.ClientContext = NULL;
; 247  :   WskClient.Dispatch      = &WskDispatch;

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:WskDispatch
  0000b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR WskClient$[rsp], 0

; 248  : 
; 249  :   Status = WskRegister(&WskClient, &WskRegistration);

  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:WskRegistration
  0001b	48 89 44 24 28	 mov	 QWORD PTR WskClient$[rsp+8], rax
  00020	48 8d 4c 24 20	 lea	 rcx, QWORD PTR WskClient$[rsp]
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WskRegister

; 250  : 
; 251  :   if (!NT_SUCCESS(Status))

  0002b	85 c0		 test	 eax, eax
  0002d	78 19		 js	 SHORT $LN1@KsInitiali

; 252  :   {
; 253  :     return Status;
; 254  :   }
; 255  : 
; 256  :   //
; 257  :   // Capture the provider NPI.
; 258  :   //
; 259  : 
; 260  :   return WskCaptureProviderNPI(

  0002f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:WskProvider
  00036	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WskRegistration
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WskCaptureProviderNPI
$LN1@KsInitiali:

; 261  :     &WskRegistration,
; 262  :     WSK_INFINITE_WAIT,
; 263  :     &WskProvider
; 264  :     );
; 265  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
KsInitialize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsDestroy
_TEXT	SEGMENT
KsDestroy PROC						; COMDAT

; 272  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  :   //
; 274  :   // Release the provider NPI instance.
; 275  :   //
; 276  : 
; 277  :   WskReleaseProviderNPI(&WskRegistration);

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WskRegistration
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WskReleaseProviderNPI

; 278  : 
; 279  :   //
; 280  :   // Deregister as a WSK client.
; 281  :   //
; 282  : 
; 283  :   WskDeregister(&WskRegistration);

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:WskRegistration

; 284  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 278  : 
; 279  :   //
; 280  :   // Deregister as a WSK client.
; 281  :   //
; 282  : 
; 283  :   WskDeregister(&WskRegistration);

  0001c	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_WskDeregister
KsDestroy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsCreateSocket
_TEXT	SEGMENT
Socket$ = 112
AddressFamily$dead$ = 120
SocketType$dead$ = 128
Protocol$ = 136
Flags$dead$ = 144
KsCreateSocket PROC					; COMDAT

; 358  : {

$LN21:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 359  :   NTSTATUS Status;
; 360  : 
; 361  :   //
; 362  :   // Allocate memory for the socket structure.
; 363  :   //
; 364  : 
; 365  :   PKSOCKET NewSocket = ExAllocatePoolWithTag(PagedPool, sizeof(KSOCKET), MEMORY_TAG);

  00014	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00019	48 8b f1	 mov	 rsi, rcx
  0001c	41 b8 61 34 66
	64		 mov	 r8d, 1684419681		; 64663461H
  00022	41 8b e9	 mov	 ebp, r9d
  00025	8d 4a d1	 lea	 ecx, QWORD PTR [rdx-47]
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ExAllocatePoolWithTag
  0002e	48 8b d8	 mov	 rbx, rax

; 366  : 
; 367  :   if (!NewSocket)

  00031	48 85 c0	 test	 rax, rax
  00034	0f 84 d9 00 00
	00		 je	 $LN19@KsCreateSo

; 97   :   KeInitializeEvent(

  0003a	45 33 c0	 xor	 r8d, r8d

; 368  :   {
; 369  :     return STATUS_INSUFFICIENT_RESOURCES;
; 370  :   }
; 371  : 
; 372  :   //
; 373  :   // Allocate async context for the socket.
; 374  :   //
; 375  : 
; 376  :   Status = KspAsyncContextAllocate(&NewSocket->AsyncContext);

  0003d	48 8d 78 10	 lea	 rdi, QWORD PTR [rax+16]

; 97   :   KeInitializeEvent(

  00041	48 8b cf	 mov	 rcx, rdi
  00044	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeInitializeEvent

; 98   :     &AsyncContext->CompletionEvent,
; 99   :     SynchronizationEvent,
; 100  :     FALSE
; 101  :     );
; 102  : 
; 103  :   //
; 104  :   // Initialize the IRP.
; 105  :   //
; 106  : 
; 107  :   AsyncContext->Irp = IoAllocateIrp(1, FALSE);

  0004e	33 d2		 xor	 edx, edx
  00050	b1 01		 mov	 cl, 1
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoAllocateIrp
  00058	48 89 47 18	 mov	 QWORD PTR [rdi+24], rax

; 108  : 
; 109  :   if (AsyncContext->Irp == NULL)

  0005c	48 85 c0	 test	 rax, rax
  0005f	0f 84 ae 00 00
	00		 je	 $LN19@KsCreateSo
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00065	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:KspAsyncContextCompletionRoutine
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 387  :   Status = WskProvider.Dispatch->WskSocket(

  00073	ba 02 00 00 00	 mov	 edx, 2
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00078	4c 89 74 24 70	 mov	 QWORD PTR [rsp+112], r14
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 387  :   Status = WskProvider.Dispatch->WskSocket(

  0007d	45 33 f6	 xor	 r14d, r14d
  00080	44 8b cd	 mov	 r9d, ebp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00083	48 89 48 f0	 mov	 QWORD PTR [rax-16], rcx

; 31852:     irpSp->Context = Context;

  00087	48 89 78 f8	 mov	 QWORD PTR [rax-8], rdi
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 387  :   Status = WskProvider.Dispatch->WskSocket(

  0008b	44 8d 42 ff	 lea	 r8d, QWORD PTR [rdx-1]
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  0008f	c6 40 bb e0	 mov	 BYTE PTR [rax-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 387  :   Status = WskProvider.Dispatch->WskSocket(

  00093	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR WskProvider
  0009e	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000a3	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR WskProvider+8
  000aa	4c 89 74 24 48	 mov	 QWORD PTR [rsp+72], r14
  000af	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  000b4	4c 89 74 24 38	 mov	 QWORD PTR [rsp+56], r14
  000b9	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  000be	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  000c3	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  000c8	ff 50 08	 call	 QWORD PTR [rax+8]
  000cb	8b c8		 mov	 ecx, eax

; 213  :   if (*Status == STATUS_PENDING)

  000cd	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  000d2	75 1d		 jne	 SHORT $LN17@KsCreateSo

; 214  :   {
; 215  :     KeWaitForSingleObject(

  000d4	45 33 c9	 xor	 r9d, r9d
  000d7	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  000dc	45 33 c0	 xor	 r8d, r8d
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b cf	 mov	 rcx, rdi
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeWaitForSingleObject

; 216  :       &AsyncContext->CompletionEvent,
; 217  :       Executive,
; 218  :       KernelMode,
; 219  :       FALSE,
; 220  :       NULL
; 221  :       );
; 222  : 
; 223  :     *Status = AsyncContext->Irp->IoStatus.Status;

  000ea	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  000ee	8b 48 30	 mov	 ecx, DWORD PTR [rax+48]
$LN17@KsCreateSo:
  000f1	4c 8b 74 24 70	 mov	 r14, QWORD PTR [rsp+112]

; 388  :     WskProvider.Client,         // Client
; 389  :     AddressFamily,              // AddressFamily
; 390  :     SocketType,                 // SocketType
; 391  :     Protocol,                   // Protocol
; 392  :     Flags,                      // Flags
; 393  :     NULL,                       // SocketContext
; 394  :     NULL,                       // Dispatch
; 395  :     NULL,                       // OwningProcess
; 396  :     NULL,                       // OwningThread
; 397  :     NULL,                       // SecurityDescriptor
; 398  :     NewSocket->AsyncContext.Irp // Irp
; 399  :     );
; 400  : 
; 401  :   KspAsyncContextWaitForCompletion(&NewSocket->AsyncContext, &Status);
; 402  : 
; 403  :   //
; 404  :   // Save the socket instance and the socket dispatch table.
; 405  :   //
; 406  : 
; 407  :   if (NT_SUCCESS(Status))

  000f6	85 c9		 test	 ecx, ecx
  000f8	78 15		 js	 SHORT $LN4@KsCreateSo

; 408  :   {
; 409  :     NewSocket->WskSocket = (PWSK_SOCKET)NewSocket->AsyncContext.Irp->IoStatus.Information;

  000fa	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]

; 410  :     NewSocket->WskDispatch = (PVOID)NewSocket->WskSocket->Dispatch;
; 411  : 
; 412  :     *Socket = NewSocket;

  000fe	48 89 1e	 mov	 QWORD PTR [rsi], rbx
  00101	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00105	48 89 03	 mov	 QWORD PTR [rbx], rax
  00108	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
$LN4@KsCreateSo:

; 413  :   }
; 414  : 
; 415  :   return Status;

  0010f	8b c1		 mov	 eax, ecx
  00111	eb 05		 jmp	 SHORT $LN1@KsCreateSo
$LN19@KsCreateSo:

; 377  : 
; 378  :   if (!NT_SUCCESS(Status))
; 379  :   {
; 380  :     return Status;

  00113	b8 9a 00 00 c0	 mov	 eax, -1073741670	; ffffffffc000009aH
$LN1@KsCreateSo:

; 416  : }

  00118	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  0011d	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  00121	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  00125	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  00129	49 8b e3	 mov	 rsp, r11
  0012c	5f		 pop	 rdi
  0012d	c3		 ret	 0
KsCreateSocket ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c
;	COMDAT KsSendRecv
_TEXT	SEGMENT
WskBuffer$ = 48
Socket$ = 96
Buffer$ = 104
Length$ = 112
Flags$dead$ = 120
Send$ = 128
KsSendRecv PROC						; COMDAT

; 653  : {

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00015	4d 8b f0	 mov	 r14, r8
  00018	4c 8b d2	 mov	 r10, rdx
  0001b	48 8b f9	 mov	 rdi, rcx

; 654  :   NTSTATUS Status;
; 655  : 
; 656  :   //
; 657  :   // Wrap the buffer into the "WSK buffer".
; 658  :   //
; 659  : 
; 660  :   WSK_BUF WskBuffer;
; 661  :   WskBuffer.Offset  = 0;

  0001e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR WskBuffer$[rsp+8], 0

; 662  :   WskBuffer.Length  = *Length;

  00026	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00029	48 89 44 24 40	 mov	 QWORD PTR WskBuffer$[rsp+16], rax

; 663  :   WskBuffer.Mdl     = IoAllocateMdl(Buffer, (ULONG)WskBuffer.Length, FALSE, FALSE, NULL);

  0002e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00037	45 33 c9	 xor	 r9d, r9d
  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	8b d0		 mov	 edx, eax
  0003f	49 8b ca	 mov	 rcx, r10
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoAllocateMdl
  00048	48 89 44 24 30	 mov	 QWORD PTR WskBuffer$[rsp], rax

; 664  : 
; 665  :   __try
; 666  :   {
; 667  :     MmProbeAndLockPages(WskBuffer.Mdl, KernelMode, IoWriteAccess);

  0004d	33 d2		 xor	 edx, edx
  0004f	44 8d 42 01	 lea	 r8d, QWORD PTR [rdx+1]
  00053	48 8b c8	 mov	 rcx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MmProbeAndLockPages
  0005c	90		 npad	 1

; 672  :     goto Error;
; 673  :   }
; 674  : 
; 675  :   //
; 676  :   // Reset the async context.
; 677  :   //
; 678  : 
; 679  :   KspAsyncContextReset(&Socket->AsyncContext);

  0005d	48 8d 77 10	 lea	 rsi, QWORD PTR [rdi+16]

; 173  :   KeResetEvent(&AsyncContext->CompletionEvent);

  00061	48 8b ce	 mov	 rcx, rsi
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeResetEvent

; 174  : 
; 175  :   //
; 176  :   // Reuse the IRP.
; 177  :   //
; 178  : 
; 179  :   IoReuseIrp(AsyncContext->Irp, STATUS_UNSUCCESSFUL);

  0006a	ba 01 00 00 c0	 mov	 edx, -1073741823	; ffffffffc0000001H
  0006f	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoReuseIrp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\km\wdm.h

; 31468:     return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );

  00079	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  0007d	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]

; 31851:     irpSp->CompletionRoutine = CompletionRoutine;

  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:KspAsyncContextCompletionRoutine
  0008b	48 89 41 f0	 mov	 QWORD PTR [rcx-16], rax

; 31852:     irpSp->Context = Context;

  0008f	48 89 71 f8	 mov	 QWORD PTR [rcx-8], rsi

; 31853:     irpSp->Control = 0;
; 31854: 
; 31855:     if (InvokeOnSuccess) {
; 31856:         irpSp->Control = SL_INVOKE_ON_SUCCESS;
; 31857:     }
; 31858: 
; 31859:     if (InvokeOnError) {
; 31860:         irpSp->Control |= SL_INVOKE_ON_ERROR;
; 31861:     }
; 31862: 
; 31863:     if (InvokeOnCancel) {
; 31864:         irpSp->Control |= SL_INVOKE_ON_CANCEL;

  00093	c6 41 bb e0	 mov	 BYTE PTR [rcx-69], 224	; 000000e0H
; File c:\users\aapo\desktop\fortnite_shait\kernel rpm\dummy\ksocket\ksocket.c

; 685  :   if (Send)

  00097	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0009b	4c 8b 4f 28	 mov	 r9, QWORD PTR [rdi+40]
  0009f	45 33 c0	 xor	 r8d, r8d
  000a2	48 8d 54 24 30	 lea	 rdx, QWORD PTR WskBuffer$[rsp]
  000a7	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  000aa	44 38 84 24 80
	00 00 00	 cmp	 BYTE PTR Send$[rsp], r8b
  000b2	74 05		 je	 SHORT $LN3@KsSendRecv

; 686  :   {
; 687  :     Status = Socket->WskConnectionDispatch->WskSend(

  000b4	ff 50 30	 call	 QWORD PTR [rax+48]

; 688  :       Socket->WskSocket,        // Socket
; 689  :       &WskBuffer,               // Buffer
; 690  :       Flags,                    // Flags
; 691  :       Socket->AsyncContext.Irp  // Irp
; 692  :       );
; 693  :   }

  000b7	eb 03		 jmp	 SHORT $LN24@KsSendRecv
$LN3@KsSendRecv:

; 694  :   else
; 695  :   {
; 696  :     Status = Socket->WskConnectionDispatch->WskReceive(

  000b9	ff 50 38	 call	 QWORD PTR [rax+56]
$LN24@KsSendRecv:

; 213  :   if (*Status == STATUS_PENDING)

  000bc	8b d8		 mov	 ebx, eax
  000be	3d 03 01 00 00	 cmp	 eax, 259		; 00000103H
  000c3	75 21		 jne	 SHORT $LN22@KsSendRecv

; 214  :   {
; 215  :     KeWaitForSingleObject(

  000c5	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000ce	45 33 c9	 xor	 r9d, r9d
  000d1	45 33 c0	 xor	 r8d, r8d
  000d4	33 d2		 xor	 edx, edx
  000d6	48 8b ce	 mov	 rcx, rsi
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_KeWaitForSingleObject

; 216  :       &AsyncContext->CompletionEvent,
; 217  :       Executive,
; 218  :       KernelMode,
; 219  :       FALSE,
; 220  :       NULL
; 221  :       );
; 222  : 
; 223  :     *Status = AsyncContext->Irp->IoStatus.Status;

  000df	48 8b 46 18	 mov	 rax, QWORD PTR [rsi+24]
  000e3	8b 58 30	 mov	 ebx, DWORD PTR [rax+48]
$LN22@KsSendRecv:

; 697  :       Socket->WskSocket,        // Socket
; 698  :       &WskBuffer,               // Buffer
; 699  :       Flags,                    // Flags
; 700  :       Socket->AsyncContext.Irp  // Irp
; 701  :       );
; 702  :   }
; 703  : 
; 704  :   KspAsyncContextWaitForCompletion(&Socket->AsyncContext, &Status);
; 705  : 
; 706  :   //
; 707  :   // Set the number of bytes sent / received.
; 708  :   //
; 709  : 
; 710  :   if (NT_SUCCESS(Status))

  000e6	85 db		 test	 ebx, ebx
  000e8	78 0a		 js	 SHORT $LN5@KsSendRecv

; 711  :   {
; 712  :     *Length = (ULONG)Socket->AsyncContext.Irp->IoStatus.Information;

  000ea	48 8b 47 28	 mov	 rax, QWORD PTR [rdi+40]
  000ee	8b 48 38	 mov	 ecx, DWORD PTR [rax+56]
  000f1	41 89 0e	 mov	 DWORD PTR [r14], ecx
$LN5@KsSendRecv:

; 713  :   }
; 714  : 
; 715  :   //
; 716  :   // Free the MDL.
; 717  :   //
; 718  : 
; 719  :   MmUnlockPages(WskBuffer.Mdl);

  000f4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR WskBuffer$[rsp]
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MmUnlockPages
  000ff	eb 05		 jmp	 SHORT $Error$27
$LN9@KsSendRecv:

; 668  :   }
; 669  :   __except (EXCEPTION_EXECUTE_HANDLER)
; 670  :   {
; 671  :     Status = STATUS_ACCESS_VIOLATION;

  00101	bb 05 00 00 c0	 mov	 ebx, -1073741819	; ffffffffc0000005H
$Error$27:

; 720  : 
; 721  : Error:
; 722  :   IoFreeMdl(WskBuffer.Mdl);

  00106	48 8b 4c 24 30	 mov	 rcx, QWORD PTR WskBuffer$[rsp]
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IoFreeMdl

; 723  :   return Status;

  00111	8b c3		 mov	 eax, ebx

; 724  : }

  00113	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00118	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0011d	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]
  00122	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00126	41 5e		 pop	 r14
  00128	c3		 ret	 0
KsSendRecv ENDP
_TEXT	ENDS
END
